package models

import (
	"errors"
	"fmt"
	"time"
)

// Customer : class
type Customer struct {
	ID          int `json:"id,string,omitempty"`
	FirstName   string
	Surname     string
	DateOfBirth time.Time
}

var (
	customers []*Customer
	nextID    = 1
)

// GetCustomers : to return Customers
func GetCustomers() []*Customer {
	return customers
}

// AddCustomer : to add Customer
func AddCustomer(customer Customer) (Customer, error) {
	if customer.ID != 0 {
		return Customer{}, errors.New("New customer must not have id.  It will be generated by the System")
	}

	customer.ID = nextID
	nextID++
	customers = append(customers, &customer)
	return customer, nil
}

// GetCustomerByID : get Customer by Id
func GetCustomerByID(id int) (Customer, error) {
	for _, v := range customers {
		if v.ID == id {
			return *v, nil
		}
	}

	return Customer{}, fmt.Errorf("The given CustomerID %d not found", id)
}

// UpdateCustomerByID : update Customer by Id
func UpdateCustomerByID(customer Customer) (Customer, error) {
	for i, v := range customers {
		if v.ID == customer.ID {
			customers[i] = &customer
			return customer, nil
		}
	}

	return Customer{}, fmt.Errorf("The given CustomerID %d not found", customer.ID)
}

//DeleteCustomerByID : delete Customer by Id
func DeleteCustomerByID(id int) error {
	for i, v := range customers {
		if v.ID == id {
			customers = append(customers[:i], customers[i+1:]...)
			return nil
		}
	}

	return fmt.Errorf("The given CustomerID %d not found", id)
}
